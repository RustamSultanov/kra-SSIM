// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace kraSSIM.Migrations
{
    [DbContext(typeof(OncallDb))]
    partial class OncallDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-rc.1.21452.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Admin", b =>
                {
                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("God")
                        .HasColumnType("boolean");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.HasKey("FullName");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("AdminTeam", b =>
                {
                    b.Property<string>("AdministrateFullName")
                        .HasColumnType("text");

                    b.Property<string>("AdministrateName")
                        .HasColumnType("text");

                    b.HasKey("AdministrateFullName", "AdministrateName");

                    b.HasIndex("AdministrateName");

                    b.ToTable("AdminTeam");
                });

            modelBuilder.Entity("ContactMode", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("ContactModes");
                });

            modelBuilder.Entity("Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("End")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("integer");

                    b.Property<long>("Start")
                        .HasColumnType("bigint");

                    b.Property<string>("TeamName")
                        .HasColumnType("text");

                    b.Property<string>("UserFullName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleName");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TeamName");

                    b.HasIndex("UserFullName");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.HasKey("Name");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Roster", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.HasIndex("TeamName");

                    b.ToTable("Rosters");
                });

            modelBuilder.Entity("RosterUser", b =>
                {
                    b.Property<string>("UserFullName")
                        .HasColumnType("text");

                    b.Property<string>("RosterName")
                        .HasColumnType("text");

                    b.Property<bool>("InRotation")
                        .HasColumnType("boolean");

                    b.Property<int>("RosterPriority")
                        .HasColumnType("integer");

                    b.HasKey("UserFullName", "RosterName");

                    b.HasIndex("RosterName");

                    b.ToTable("RosterUsers");
                });

            modelBuilder.Entity("Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AdvancedMode")
                        .HasColumnType("boolean");

                    b.Property<int>("AutoPopulateThreshold")
                        .HasColumnType("integer");

                    b.Property<long>("LastEpochScheduled")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.Property<string>("RosterName")
                        .HasColumnType("text");

                    b.Property<string>("SchedulerName")
                        .HasColumnType("text");

                    b.Property<string>("TeamName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleName");

                    b.HasIndex("RosterName");

                    b.HasIndex("SchedulerName");

                    b.HasIndex("TeamName");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Scheduler", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Schedulers");
                });

            modelBuilder.Entity("Team", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("SchedulingTimezone")
                        .HasColumnType("text");

                    b.Property<string>("SlackChannel")
                        .HasColumnType("text");

                    b.Property<string>("SlackChannelNotifications")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<string>("DutyFullName")
                        .HasColumnType("text");

                    b.Property<string>("DutyName")
                        .HasColumnType("text");

                    b.HasKey("DutyFullName", "DutyName");

                    b.HasIndex("DutyName");

                    b.ToTable("TeamUser");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.HasKey("FullName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserContact", b =>
                {
                    b.Property<string>("UserFullName")
                        .HasColumnType("text");

                    b.Property<string>("ContactModeName")
                        .HasColumnType("text");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserFullName", "ContactModeName");

                    b.HasIndex("ContactModeName");

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("AdminTeam", b =>
                {
                    b.HasOne("Admin", null)
                        .WithMany()
                        .HasForeignKey("AdministrateFullName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team", null)
                        .WithMany()
                        .HasForeignKey("AdministrateName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Event", b =>
                {
                    b.HasOne("Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleName");

                    b.HasOne("Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId");

                    b.HasOne("Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamName");

                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserFullName");

                    b.Navigation("Role");

                    b.Navigation("Schedule");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Roster", b =>
                {
                    b.HasOne("Team", "Team")
                        .WithMany("Rotates")
                        .HasForeignKey("TeamName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("RosterUser", b =>
                {
                    b.HasOne("Roster", "Roster")
                        .WithMany()
                        .HasForeignKey("RosterName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("Rotates")
                        .HasForeignKey("UserFullName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roster");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Schedule", b =>
                {
                    b.HasOne("Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleName");

                    b.HasOne("Roster", "Roster")
                        .WithMany()
                        .HasForeignKey("RosterName");

                    b.HasOne("Scheduler", "Scheduler")
                        .WithMany()
                        .HasForeignKey("SchedulerName");

                    b.HasOne("Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamName");

                    b.Navigation("Role");

                    b.Navigation("Roster");

                    b.Navigation("Scheduler");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("DutyFullName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team", null)
                        .WithMany()
                        .HasForeignKey("DutyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserContact", b =>
                {
                    b.HasOne("ContactMode", "ContactMode")
                        .WithMany()
                        .HasForeignKey("ContactModeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("UserContacts")
                        .HasForeignKey("UserFullName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactMode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Team", b =>
                {
                    b.Navigation("Rotates");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Rotates");

                    b.Navigation("UserContacts");
                });
#pragma warning restore 612, 618
        }
    }
}
