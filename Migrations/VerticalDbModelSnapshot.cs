// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace kraSSIM.Migrations
{
    [DbContext(typeof(VerticalDb))]
    partial class VerticalDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-rc.1.21452.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Attribute", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ConceptName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ActualFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActualTo")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Name", "ConceptName", "ActualFrom");

                    b.HasIndex("ConceptName");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("AttributeValue", b =>
                {
                    b.Property<int>("IndividId")
                        .HasColumnType("integer");

                    b.Property<string>("AttributeName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ActualFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActualTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("AttributeActualFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AttributeConceptName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<JsonDocument>("Value")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("IndividId", "AttributeName", "ActualFrom");

                    b.HasIndex("AttributeName", "AttributeConceptName", "AttributeActualFrom");

                    b.ToTable("AttributeValues");
                });

            modelBuilder.Entity("Concept", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Concepts");
                });

            modelBuilder.Entity("Individ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Individs");
                });

            modelBuilder.Entity("Attribute", b =>
                {
                    b.HasOne("Concept", "Concept")
                        .WithMany("Attributes")
                        .HasForeignKey("ConceptName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concept");
                });

            modelBuilder.Entity("AttributeValue", b =>
                {
                    b.HasOne("Individ", "Individ")
                        .WithMany("Values")
                        .HasForeignKey("IndividId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Attribute", "Attribute")
                        .WithMany("Values")
                        .HasForeignKey("AttributeName", "AttributeConceptName", "AttributeActualFrom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Individ");
                });

            modelBuilder.Entity("Attribute", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("Concept", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Individ", b =>
                {
                    b.Navigation("Values");
                });
#pragma warning restore 612, 618
        }
    }
}
